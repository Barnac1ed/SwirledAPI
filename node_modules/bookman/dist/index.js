"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = exports.adapters = void 0;
var lodash_1 = require("lodash");
var FS_1 = require("./FS");
var fs_1 = require("fs");
exports.adapters = {
    FS: FS_1.FS,
};
var Database = /** @class */ (function () {
    function Database(name, options, adapter) {
        var _this = this;
        if (options === void 0) { options = { defaultDir: ".bookman" }; }
        if (adapter === void 0) { adapter = new FS_1.FS(); }
        this.defaultDir = ".bookman";
        this.getDefaultData = function () {
            return _this.adapter.get(_this.name, _this.defaultDir)
                ? JSON.parse(_this.adapter.get(_this.name, _this.defaultDir))
                : {};
        };
        this.fetch = function (name) { return _this.get(name); };
        this.fetchAll = function () { return _this.getDefaultData(); };
        this.map = this.fetchAll;
        this.all = this.fetchAll;
        this.getAll = this.fetchAll;
        this.destroy = function () { return _this.adapter.destroy(_this.name, _this.defaultDir); };
        this.name = name;
        this.adapter = adapter;
        this.defaultDir = options.defaultDir;
        if (this.adapter instanceof FS_1.FS && !fs_1.existsSync("./" + this.defaultDir)) {
            fs_1.mkdirSync("./" + this.defaultDir);
        }
        if (this.adapter instanceof FS_1.FS && !fs_1.existsSync("./" + this.defaultDir + "/" + name + ".json")) {
            fs_1.writeFileSync("./" + this.defaultDir + "/" + name + ".json", "{}");
        }
    }
    Database.prototype.set = function (name, value) {
        var data = this.getDefaultData();
        lodash_1.set(data, name, value);
        this.adapter.set(this.name, JSON.stringify(data), this.defaultDir);
        return lodash_1.get(data, name);
    };
    Database.prototype.get = function (name) {
        var data = this.getDefaultData();
        return lodash_1.get(data, name);
    };
    Database.prototype.has = function (name) {
        var data = this.getDefaultData();
        return lodash_1.has(data, name);
    };
    Database.prototype.push = function (name, value) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = [];
        if (!Array.isArray(savedData))
            throw new Error("Data to push should be an array");
        savedData.push(value);
        return this.set(name, savedData);
    };
    Database.prototype.pop = function (name) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = [];
        if (!Array.isArray(savedData))
            throw new Error("Data to pop should be an array");
        var value = savedData.pop();
        this.set(name, savedData);
        return value;
    };
    Database.prototype.shift = function (name) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = [];
        if (!Array.isArray(savedData))
            throw new Error("Data to shift should be an array");
        var value = savedData.shift();
        this.set(name, savedData);
        return value;
    };
    Database.prototype.unshift = function (name, value) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = [];
        if (!Array.isArray(savedData))
            throw new Error("Data to unshift should be an array");
        savedData.unshift(value);
        this.set(name, savedData);
        return savedData;
    };
    Database.prototype.add = function (name, value) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = 0;
        if (typeof savedData !== "number")
            throw new Error("Data to add should be a number");
        savedData += value;
        this.set(name, savedData);
        return savedData;
    };
    Database.prototype.subtract = function (name, value) {
        var savedData = this.get(name);
        if (typeof savedData === "undefined")
            savedData = 0;
        if (typeof savedData !== "number")
            throw new Error("Data to subtract should be a number");
        savedData -= value;
        this.set(name, savedData);
        return savedData;
    };
    Database.prototype.delete = function (name) {
        var data = this.getDefaultData();
        lodash_1.unset(data, name);
        this.adapter.set(this.name, JSON.stringify(data), this.defaultDir);
        return data;
    };
    return Database;
}());
exports.Database = Database;
